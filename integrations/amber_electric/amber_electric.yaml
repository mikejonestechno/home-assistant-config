# Install official integration using the Settings UI
# Name the integration 'amber' so that entities are named
# sensor.amber_general_price, sensor.amber_general_forecast

# This yaml will add custom template sensors since the official sensors are in $/kWh
# in oder to be compatible with the Energy dashboard cost estimates,
# but I prefer cents per kWh for normal dashboard cards and automations.

template:
# the trigger is only used to set variables use variable just using "{{ var_name }}"
# https://community.home-assistant.io/t/why-cant-we-use-variables-in-a-template-sensor/467170/2
- trigger:  
  - platform: state

    # change to general_forecast so we re-calc on forecast change not price change
    # but use general_price change to help test/debug without waiting for forecast update

    # forecasts[0] starts at the next 30 min block. so if now is 18:01 then forecasts[0] starts at 18:30
    entity_id: sensor.amber_general_price
    id: general
    variables:     
      amber_4hr_price:           "{{ (state_attr('sensor.amber_general_forecast', 'forecasts')[8]).per_kwh }}"
      amber_4hr_forecast:        "{{  state_attr('sensor.amber_general_forecast', 'forecasts')[0:8]  }}"
      amber_4hr_forecast_prices: "{{  state_attr('sensor.amber_general_forecast', 'forecasts')[0:8] | map(attribute='per_kwh') | sort }}"
      amber_12hr_price:           "{{ (state_attr('sensor.amber_general_forecast', 'forecasts')[24]).per_kwh }}"
      amber_12hr_forecast:        "{{  state_attr('sensor.amber_general_forecast', 'forecasts')[0:24]  }}"
      amber_12hr_forecast_prices: "{{  state_attr('sensor.amber_general_forecast', 'forecasts')[0:24] | map(attribute='per_kwh') | sort }}"

  sensor:

  - name: "Amber - Forecast Price"
    unique_id: "amber_forecast_price"
    # State is current price in cents / cWh
    state: "{{ ((states('sensor.amber_general_price') | float) * 100) | round }}"
    state_class: "measurement"
    unit_of_measurement: "c/kWh"        
    icon: "mdi:transmission-tower"
    # on HA startup this sensor must wait until the amber price is available
    availability: "{{ is_number(states('sensor.amber_general_forecast')) }}"
    attributes:
      amber_4hr_price:  "{{ amber_4hr_price }}"
      amber_4hr_min:    "{{ amber_4hr_forecast_prices | first }}"
      amber_4hr_max:    "{{ amber_4hr_forecast_prices | last  }}"
      amber_4hr_median: "{{ amber_4hr_forecast_prices[(amber_4hr_forecast_prices|count/2)|int]  }}"
      amber_12hr_price:  "{{ amber_12hr_price }}"
      amber_12hr_min:    "{{ amber_12hr_forecast_prices | first }}"
      amber_12hr_max:    "{{ amber_12hr_forecast_prices | last  }}"
      amber_12hr_median: "{{ amber_12hr_forecast_prices[(amber_12hr_forecast_prices|count/2)|int]  }}"
      attribution: "amber_electric.yaml"

# #Example Dashboard UI showing price band label with color changing icon
# #type: custom:mushroom-template-card
# #primary: 'Electricity Price: {{ state_attr(''sensor.amber_current_price'',''band'') }}'
# #secondary: '{{ states(''sensor.amber_current_price'', with_unit=true) }} '
# #icon: '{{ state_attr(''sensor.amber_current_price'',''icon'') }} '
# #entity: sensor.amber_current_price
# #icon_color: '{{ state_attr(''sensor.amber_current_price'',''color'') }}'
